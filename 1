#!/usr/bin/python3
import base64
from datetime import datetime, timedelta
from models import storage
from models.user import User
from models.tasks import Tasks
from flask import Flask, render_template, redirect, request, url_for, make_response, session
#from flask_session import Session
import urllib.parse as urlparse
import json
import requests
import os
import pytz
import secrets
import string

app = Flask(__name__)

#app.secret_key = 'girl'
#app.config["SESSION_PERMANENT"] = True
#app.config["SESSION_TYPE"] = "filesystem"
#Session(app)

CLIENT_ID = os.getenv('CLIENT_ID', None)
CLIENT_SECRET = os.getenv('CLIENT_SECRET', None)
REDIRECT_URI = "http://localhost:5000/callback"
TOKEN_ENDPOINT = "https://accounts.spotify.com/api/token"
PROFILE_ENDPOINT = "https://api.spotify.com/v1/me"


user = storage.get(User, '00a11245-12fa-436e-9ccc-967417f8c30a')

state = ''.join(secrets.choice(string.ascii_uppercase + string.digits)
                for i in range(16))

@app.route('/flow', strict_slashes=False)
def flow():
    '''Flow endpoint for music recommendation'''
    session_contents = []
    for key, value in session.items():
        session_contents.append(f"{key}: {value}")    
    print("<br>".join(session_contents))

    if 'token' not in session and 'refresh' not in session:
        return redirect('/login')
  #  token = session.get('token')
 #   refresh = session.get('refresh')
  #  expires = session.get('expires')
  #  session.modified = True
  #  session.permanent = True
     
   # if expires < datetime.now():
    #    print('expired')
    #    token = refresh_token()
    
    #token = spotify()
    print(token, 'token')
    tracks = get_tracks(token)
    limit = 1
    params = {
    'seed_artists': '4NHQUGzhtTLFvgF5SZesLK',
    'seed_genres': 'rock, samba',
    'seed_tracks': '{}, {}'.format(track_ids[0], track_ids[1])
    }
    headers = {'Authorization': 'Bearer ' + token}
    res = requests.get(url, params=params, headers=headers).json()
    href = res.get('tracks').get('external_urls').get('href')
    return redirect(href)
    

@app.route('/deadline', strict_slashes=False)
def deadline():
    '''Deadline endpoint'''
    #handles
    token = spotify()
    tracks = get_tracks(token)
    limit = 1
    params = {
    'seed_artists': '4NHQUGzhtTLFvgF5SZesLK',
    'seed_genres': 'classical, country',
    'seed_tracks': '{}, {}'.format(tracks[0], tracks[1])
    }
    headers = {'Authorization': 'Bearer ' + token}
    res = requests.get(url, params=params, headers=headers).json()
    href = res.get('tracks').get('external_urls').get('href')
    return redirect(href)

def get_tracks(token):
    '''Get 2 User Saved Tracks'''
    limit = 2
    url = 'https://api.spotify.com/v1/me/tracks?limit={}'.format(limit)
    headers = {'Authorization': 'Bearer ' + token}
    res = requests.get(url, headers=headers).json()
    items = res.get('items')
    track_ids = [item.get('track').get('id') for item in items]
    return track_ids

@app.route('/login', strict_slashes=False)
def authorise():
    'request authorization from the user, so app can access the Spotify resources'
    scope = 'user-library-read'
    authorize_url = 'https://accounts.spotify.com/authorize?' + urlparse.urlencode({
        'response_type': 'code',
        'client_id': CLIENT_ID,
        'scope': scope,
        'redirect_uri': REDIRECT_URI,
        'state': state
    })
    return redirect(authorize_url)

@app.route('/callback', strict_slashes=False)
def callback():
    if len(request.args) > 0:
        code = request.args.get('code')
        req_state = request.args.get('state', None)
        if code is None or state != req_state:
            error_msg = {'error': 'state_mismatch'}
            make_response(jsonify(error_msg), 404)
            return response
        token = get_token(code)
    return redirect('/')

@app.route('/spotify', strict_slashes=False) 
def spotify():

    expires = session.get('expires')
    #if not authorised
    if not token and not refresh:
        print('login')
        return redirect('/')
        print('available')
        return token

def get_token(code):
    '''gets user access token/refresh token'''
    client_cred = CLIENT_ID + ':' + CLIENT_SECRET
    auth_options = {
        'url': 'https://accounts.spotify.com/api/token',
        'data': {
            'code': code,
            'redirect_uri': REDIRECT_URI,
            'grant_type': 'authorization_code'
        },
        'headers': {
            'authorization': 'basic ' + base64.b64encode((client_cred).encode()).decode(),
            'content-type': 'application/x-www-form-urlencoded'
        },
        'json': True
    }
    try:
        response = requests.post(auth_options['url'], data=auth_options['data'], headers=auth_options['headers'])
        res = response.json()
        print(res)
    except exception:
        return('/')
    #later handle if status code == 200 .. else
    token = res.get('access_token')
    refresh = res.get('refresh_token')
    expires = res.get('expires_in')
#    session['token'] = token
#    session['refresh'] = refresh
    expires = datetime.now() + timedelta(seconds=expires)
#    session.expires = expires
#    print(session.get('token'), 'in session')
    return token

def refresh_token():
    '''refreshes spotify access token'''
    client_cred = client_id + ':' + client_secret
    auth_options = {
        'url': 'https://accounts.spotify.com/api/token',
        'data': {
            'grant_type': 'authorization_code',
            'refresh_token': refresh
        },
        'headers': {
            'authorization': 'basic ' + base64.b64encode((client_cred).encode()).decode(),
            'content-type': 'application/x-www-form-urlencoded'
        },
        'json': true
    }
    response = requests.post(auth_options['url'], data=auth_options['data'], headers=auth_options['headers'])
    res = response.json()
    token = res.get('access_token')
    expires = res.get('expires_in')
    session['token'] = token
    expires = datetime.now() + timedelta(seconds=expires)
    session['expires'] = expires
    return token

@app.route('/', strict_slashes=False)
def main():
    if os.getenv('STORAGE_TYPE', None) == 'db':
        tasks = user.tasks
    else:
        tasks = user.tasks()
    done = [task for task in tasks if task.completed == 1]
    try:
        description, temp, humidity, pressure, speed = get_weather(user)
    except TypeError:
        description = None
        temp = humidity = pressure = speed = 0
    home = datetime.now().strftime("%I:%M %p")
    
    away = pytz.timezone('Asia/Kuwait')
    away = datetime.now(away).strftime('%I:%M %p')
    return render_template('index.html',
                           user=user, total=len(tasks),
                           t_list=zip(tasks, range(len(tasks))),
                           done=len(done), t=temp, humid=humidity,
                           press=pressure, speed=speed,
                           summ=description, home=home,
                           city=user.city, away=away)

@app.route('/add/<u_id>', strict_slashes=False, methods=['POST'])
def post_task(u_id):
    'Sends a post request to api and renders updated page'
    url = 'http://0.0.0.0:5001/api/v1/users/{}/tasks'.format(u_id)
    headers = {
        "Content-Type": "application/json"
    }
    data = request.form.to_dict()
    data.update({'completed': 0})
    requests.post(url, json=data, headers=headers)
    print(type(data))
    return redirect('/')

def get_weather(user):
    api = os.getenv('WEATHER_KEY', None)
    country = user.country
    city = user.city
    endpoint = 'https://api.openweathermap.org/data/2.5/weather?q={},{}&limit=1&appid={}'.format(city, country, api)
    try:
        r = requests.get(endpoint).json()
    except Exception:
        return
    name = r.get('name')
    description = r.get('weather')[0].get('description')
    temp = r.get('main').get('temp')
    humidity = r.get('main').get('humidity')
    pressure = r.get('main').get('pressure')
    speed = r.get('wind').get('speed')
    return (description, temp, humidity, pressure, speed)


if __name__ == "__main__":
    """ Main Function """
    app.run(host='0.0.0.0', port=5000, debug=True)
